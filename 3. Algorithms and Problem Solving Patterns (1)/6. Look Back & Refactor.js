// 시간을 내어 코드를 살펴보고 되돌아보고 성찰하는 것은 매우 좋은 기회다.
// 각 구성요소를 한 줄씩 살펴 보면서 마음에 들지 않는 부분이나, 코드의 형태, 해석 방법, 또 이해하기 얼마나 쉬운지에 대해 이야기를 하라는 의미다.
//
// 한 줄씩 코드를 읽으면서 생각한다.
// 이상적이지 않은 부분에 더 나은 방법을 적용할 수 있을 텐데 확신이 들지 않으니 더 빨리 처리할 수 있는 다른 방법을 검색해 봐야겠다 이런 생각들을 하는 것이다.

// RECAP! 결론
// 우선 문제를 확실히 이해하는 단계입니다.
// 또한 뭔가 작업을 수행하면서 어떤 해결책을 마련할지, 애플리케이션이 어떻게 구동되도록 할지
// 각 상황에서 어떤 식으로 작동되도록 할지에 대해 확실히 이해하기 위해서도 마찬가지다.
// 이는 구체적인 예시를 살펴보는 것과도 관련이 있다.
// 세분화 단계에서는 완벽한 의사코드를 한 줄씩 작성하는 것도 좋지만 구현해야 할 코드에 대한 계획의 틀을 잡기 위한 단계를 몇 가지로 세분화하는 것도 좋다.
// 코드를 작성하기 전에 방향을 확실히 정해야 합니다.
// 다음은 해결 단계입니다.
// 문제를 당장 해결할 수 없다면 해결할 수 있는 문제부터 처리하시기 바란다.
// 단순한 문제 같더라도 더 단순화하면 핵심적인 어려운 부분이 사라진다.
// 해결할 수 있는 부분을 먼저 처리하면 어려운 부분을 다시 통합할 수 있을 것이다.
// 마지막으로 말씀드렸던 개발자로서 배우거나 향상하는 데 있어서 중요한 것은 코드를 되돌아보고 리팩토링하고, 때로는 되돌아보고 분석하면서 자신을 격려하는 것이다.